{"version":3,"sources":["MainComponent.js","DisplayComponent.js","App.js","serviceWorker.js","index.js"],"names":["MainComponent","props","submitHandler","event","preventDefault","passProps","state","zip1","zip2","changeHandler","name","target","val","value","err","Number","setState","errormessage","onSubmit","this","href","for","type","id","onChange","React","Component","DisplayComponent","geoCodeArr","arr","i","length","j","zipcodeData","Zipcode","push","Lat","Long","lat1","long1","lat2","long2","costha","Math","sin","cos","acos","PI","data","calculateDistance","App","zipcode","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAyDeA,G,kBArDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,cAAgB,SAACC,GACbA,EAAMC,iBAGN,EAAKH,MAAMI,UAAU,CAAC,EAAKC,MAAMC,KAAM,EAAKD,MAAME,QAZnC,EAcnBC,cAAgB,SAACN,GACb,IAAIO,EAAOP,EAAMQ,OAAOD,KACpBE,EAAMT,EAAMQ,OAAOE,MACnBC,EAAM,GACC,IAAPF,GAAcG,OAAOH,KACrBE,EAAM,gEAEV,EAAKE,SAAS,CAAEC,aAAcH,IAC9B,EAAKE,SAAL,eAAiBN,EAAOE,KApBxB,EAAKN,MAAQ,CACTC,KAAM,GACNC,KAAM,GACNS,aAAc,IALH,E,sEAyBf,OACI,6BACI,0BAAMC,SAAUC,KAAKjB,eACjB,4HACV,uBAAGkB,KAAK,gCAAR,iCADU,qCAEA,2BAAOC,IAAI,YAAX,aACA,2BACIC,KAAK,OACLZ,KAAK,OACLa,GAAG,WACHC,SAAUL,KAAKV,gBACjB,6BACF,2BAAOY,IAAI,YAAX,aACA,2BACIC,KAAK,OACLZ,KAAK,OACLa,GAAG,WACHC,SAAUL,KAAKV,gBACjB,6BAEF,2BAAOa,KAAK,WACZ,uBAAGC,GAAG,SAASJ,KAAKb,MAAMW,oB,GA/ClBQ,IAAMC,Y,OC2CnBC,E,YAzCX,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACDK,MAAQ,CACTsB,WAAY,IAHD,E,2EAOLC,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIC,EAAYF,OAAQC,IAChCH,EAAIC,IAAMG,EAAYD,GAAGE,UACzBf,KAAKb,MAAMsB,WAAWO,KAAKF,EAAYD,GAAGI,KAC1CjB,KAAKb,MAAMsB,WAAWO,KAAKF,EAAYD,GAAGK,S,0CAOtD,IAAIC,EAAOnB,KAAKb,MAAMsB,WAAW,GAC7BW,EAAQpB,KAAKb,MAAMsB,WAAW,GAC9BY,EAAOrB,KAAKb,MAAMsB,WAAW,GAC7Ba,EAAQtB,KAAKb,MAAMsB,WAAW,GAE9Bc,EAAUC,KAAKC,IAAIN,GAAQK,KAAKC,IAAIJ,GAASG,KAAKE,IAAIP,GAAQK,KAAKE,IAAIL,GAAQG,KAAKE,IAAIN,EAAQE,GAMpG,MAFc,QADJ,SAFEE,KAAKG,KAAKJ,IACEC,KAAKI,GAAK,S,+BAOlC,OACI,6BACI,mDAAyB5B,KAAKlB,MAAM+C,KAAK,IAAM,YAA/C,SAAkE7B,KAAKlB,MAAM+C,KAAK,IAAM,aAAxF,MACQ7B,KAAK8B,oBADb,kB,GArCexB,IAAMC,WCuBtBwB,E,YArBb,WAAYjD,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,CACX0C,KAAM,IAHS,E,uEAOTG,GACRhC,KAAKH,SAAS,CAAEgC,KAAMG,M,+BAItB,OACE,6BACE,kBAAC,EAAD,CAAe9C,UAAWc,KAAKd,UAAU+C,KAAKjC,QAC9C,kBAAC,EAAD,CAAkB6B,KAAM7B,KAAKb,MAAM0C,Y,GAhBzBvB,IAAMC,WCQJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.af5a1b22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MainComponent.css';\r\n\r\nclass MainComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zip1: '',\r\n            zip2: '',\r\n            errormessage: ''\r\n        };\r\n    }\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        // alert(\"You are submitting \" + this.state.username);\r\n        this.props.passProps([this.state.zip1, this.state.zip2]);\r\n    }\r\n    changeHandler = (event) => {\r\n        let name = event.target.name;\r\n        let val = event.target.value;\r\n        let err = '';\r\n        if (val != \"\" && !Number(val)) {\r\n            err = <strong>Your input must be a number</strong>;\r\n        }\r\n        this.setState({ errormessage: err });\r\n        this.setState({ [name]: val });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h5> Note: Please enter data in decimal degree. All zipcodes with their respective lat/lng are at\r\n          <a href='federalgovernmentzipcodes.us'> federalgovernmentzipcodes.us</a> or in data.json file. Thank you.</h5>\r\n                    <label for=\"zipcode1\">Zipcode 1</label>\r\n                    <input\r\n                        type='text'\r\n                        name='zip1'\r\n                        id='zipcode1'\r\n                        onChange={this.changeHandler}\r\n                    /><br />\r\n                    <label for=\"zipcode1\">Zipcode 2</label>\r\n                    <input\r\n                        type='text'\r\n                        name='zip2'\r\n                        id='zipcode2'\r\n                        onChange={this.changeHandler}\r\n                    /><br />\r\n\r\n                    <input type='submit' />\r\n                    <p id=\"error\">{this.state.errormessage}</p>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainComponent;","import React from 'react';\r\nimport zipcodeData from './zipData/data.json'\r\n\r\nclass DisplayComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            geoCodeArr: []\r\n        };\r\n    }\r\n\r\n    lookupLatLong(arr) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < zipcodeData.length; j++) {\r\n                if (arr[i] == zipcodeData[j].Zipcode) {\r\n                    this.state.geoCodeArr.push(zipcodeData[j].Lat);\r\n                    this.state.geoCodeArr.push(zipcodeData[j].Long);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateDistance() {\r\n        let lat1 = this.state.geoCodeArr[0];\r\n        let long1 = this.state.geoCodeArr[1];\r\n        let lat2 = this.state.geoCodeArr[2];\r\n        let long2 = this.state.geoCodeArr[3];\r\n\r\n        let costha = (Math.sin(lat1) * Math.sin(lat2)) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);\r\n        let theta = Math.acos(costha);\r\n        let degtoRad = theta * (Math.PI / 180);\r\n        let km = (6378.14) * degtoRad;\r\n        let mi = km * 0.62137;\r\n\r\n        return mi;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>The distance between {this.props.data[0] || \"zipcode 1\"}  and {this.props.data[1] || \"zipcode 2 \"}\r\n                    is {this.calculateDistance()} mile(s).</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default DisplayComponent;","import React from 'react';\nimport MainComponent from './MainComponent';\nimport DisplayComponent from './DisplayComponent';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  passProps(zipcode) {\n    this.setState({ data: zipcode })\n  }\n\n  render() {\n    return (\n      <div>\n        <MainComponent passProps={this.passProps.bind(this)} />\n        <DisplayComponent data={this.state.data} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}